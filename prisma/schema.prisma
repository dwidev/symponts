generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts      Account[]
  Chat Chat[]

  @@map("users")
  UserUIResponse UserUIResponse[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum CHAT_SENDER {
  ASSISTANT
  USER
}

model Chat {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  startTime   DateTime  @default(now()) @map("start_time")
  endTime     DateTime? @map("end_time")
  status      String    @db.VarChar(20) // 'active', 'completed', 'symptom_check_done', 'free_chat'

  user        User      @relation(fields: [userId], references: [id])
  messages    Message[]

  @@map("chats")
}

model Message {
  id           String    @id @default(cuid())
  chatId       String    @map("chat_id")
  uiElementId  String?   @unique @map("ui_element_id")
  senderType   CHAT_SENDER    @default(ASSISTANT) @map("sender_type")
  messageText  String    @map("message_text") @db.Text
  timestamp    DateTime  @default(now())

  chat         Chat        @relation(fields: [chatId], references: [id])
  uiElement    BotUIElement? @relation(fields: [uiElementId], references: [id])

  @@map("messages")
}

model BotUIElement {
  id            String    @id @default(cuid())
  elementType   String    @map("element_type") @db.VarChar(20) 
  promptText    String    @map("prompt_text") @db.Text
  configuration Json      @db.JsonB
  createdAt     DateTime  @default(now()) @map("created_at")
  expiresAt     DateTime? @map("expires_at")

  userResponses UserUIResponse[]
  Message Message[]

  @@map("bot_ui_elements")
}

model UserUIResponse {
  id            String    @id @default(uuid()) @map("response_id")
  uiElementId   String    @map("ui_element_id")
  userId        String    @map("user_id")
  responseValue String    @map("response_value") @db.Text
  respondedAt   DateTime  @default(now()) @map("responded_at")

  uiElement     BotUIElement @relation(fields: [uiElementId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@map("user_ui_responses")
}
